### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Address {
  city: String
  id: String!
  isPrimary: Boolean!
  number: String
  postNumber: String
  street: String
}

input AddressInput {
  city: String
  isPrimary: Boolean
  number: String
  postNumber: String
  state: String
  street: String
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateCustomerInput {
  addresses: [AddressInput!]
  allowedBankPayments: Boolean
  email: String
  identificationNumber: String
  name: String
  note: String
  personName: String
  phone: String
  taxIdentificationNumber: String
}

type Customer {
  address(after: String, before: String, first: Int, last: Int, skip: Int): [Address!]!
  allowedBankPayments: Boolean!
  createdBy: User!
  email: String
  id: String!
  identificationNumber: String
  name: String
  note: String
  personName: String
  phone: String
  taxIdentificationNumber: String
}

type CustomerEdge {
  cursor: String!
  node: Customer!
}

type CustomerHelperInfo {
  city: String
  identificationNumber: String
  name: String
  postNumber: String
  street: String
  taxIdentificationNumber: String
}

type CustomersConnection {
  edges: [CustomerEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

scalar DateTime

type Mutation {
  changePassword(newPassword: String!, oldPassword: String!): User!
  createCustomer(input: CreateCustomerInput!): Customer!
  createOrder(number: Int!): Order!
  login(email: String!, password: String!): AuthPayload!
  register(email: String!, name: String, password: String!): AuthPayload!
}

type Order {
  createdAt: DateTime!
  createdBy: User!
  customer: Customer
  id: String!
  number: Int!
  updatedAt: DateTime!
}

type OrderEdge {
  cursor: String!
  node: Order!
}

type OrdersConnection {
  edges: [OrderEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  getAllCustomers(after: String, before: String, first: Int, last: Int, search: String): CustomersConnection!
  getAllOrders(after: String, before: String, first: Int, last: Int): OrdersConnection!
  getCustomer(id: ID!): Customer
  getCustomerHelperInfo(partialIdentificationNumber: String!): CustomerHelperInfo!
  me: User!
}

type User {
  email: String!
  id: String!
  name: String
}
