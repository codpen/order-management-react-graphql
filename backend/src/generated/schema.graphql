### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Address {
  city: String
  id: String!
  isPrimary: Boolean!
  number: String
  postNumber: String
  street: String
}

input AddressInput {
  city: String
  isPrimary: Boolean
  number: String
  postNumber: String
  state: String
  street: String
}

input AddressWhereUniqueInput {
  id: String
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateCustomerInput {
  addresses: [AddressInput!]
  allowedBankPayments: Boolean
  email: String
  identificationNumber: String
  name: String
  note: String
  personName: String
  phone: String
  taxIdentificationNumber: String
}

type Customer {
  addresses(after: AddressWhereUniqueInput, before: AddressWhereUniqueInput, first: Int, last: Int, skip: Int): [Address!]!
  allowedBankPayments: Boolean!
  createdAt: DateTime!
  createdBy: User!
  email: String
  id: String!
  identificationNumber: String
  name: String
  note: String
  personName: String
  phone: String
  taxIdentificationNumber: String
  updatedAt: DateTime!
}

type CustomerHelperInfo {
  city: String
  identificationNumber: String
  name: String
  postNumber: String
  street: String
  taxIdentificationNumber: String
}

type CustomerPaginated {
  items: [Customer!]!
  totalCount: Int!
}

scalar DateTime

type Material {
  createdAt: DateTime!
  createdBy: User!
  id: String!
  name: String!
  price: Float!
  updatedAt: DateTime!
}

type Mutation {
  addOrderItem(input: OrderItemInput!, orderId: ID): OrderItem!
  changePassword(newPassword: String!, oldPassword: String!): User!
  createCustomer(input: CreateCustomerInput!): Customer!
  createMaterial(name: String!, price: Float!): Material!
  createOrder(customerId: ID, items: [OrderItemInput!], note: String, number: Int!, totalPrice: Float, totalTax: Float): Order!
  login(email: String!, password: String!): AuthPayload!
  register(email: String!, name: String, password: String!): AuthPayload!
  updateCustomer(input: UpdateCustomerInput!): Customer!
}

type Order {
  createdAt: DateTime!
  createdBy: User!
  customer: Customer
  id: String!
  items(after: OrderItemWhereUniqueInput, before: OrderItemWhereUniqueInput, first: Int, last: Int, skip: Int): [OrderItem!]!
  note: String
  number: Int!
  shippedAt: DateTime
  totalPrice: Float!
  totalTax: Float!
  updatedAt: DateTime!
  urgency: Int!
}

type OrderItem {
  createdAt: DateTime!
  createdBy: User!
  height: Float
  id: String!
  name: String
  pieces: Int
  totalPrice: Float!
  totalTax: Float!
  updatedAt: DateTime!
  width: Float
}

input OrderItemInput {
  height: Float
  materialId: ID
  name: String
  pieces: Int
  totalPrice: Float!
  totalTax: Float!
  width: Float
}

input OrderItemWhereUniqueInput {
  id: String
}

type OrderPaginated {
  items: [Order!]!
  totalCount: Int!
}

type Query {
  getAllCustomers(first: Int, search: String, skip: Int): CustomerPaginated!
  getAllOrders(first: Int, skip: Int): OrderPaginated!
  getCustomer(id: ID!): Customer
  getCustomerHelperInfo(partialIdentificationNumber: String!): CustomerHelperInfo!
  me: User!
}

input UpdateAddressInput {
  city: String
  id: ID
  isPrimary: Boolean
  number: String
  postNumber: String
  state: String
  street: String
}

input UpdateCustomerInput {
  addresses: [UpdateAddressInput!]
  allowedBankPayments: Boolean
  email: String
  id: ID
  identificationNumber: String
  name: String
  note: String
  personName: String
  phone: String
  taxIdentificationNumber: String
}

type User {
  email: String!
  id: String!
  name: String
}
