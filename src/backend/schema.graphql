### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  city: String
  id: ID!
  isPrimary: Boolean!
  number: String
  postNumber: String
  street: String
}

input AddressInput {
  city: String
  isPrimary: Boolean
  number: String
  postNumber: String
  state: String
  street: String
}

type AuthPayload {
  token: String
  user: User
}

input CreateCustomerInput {
  addresses: [AddressInput]
  allowedBankPayments: Boolean
  email: String
  identificationNumber: String
  name: String
  note: String
  personName: String
  phone: String
  taxIdentificationNumber: String
}

input CreateUserInput {
  email: String!
  name: String
  password: String!
  role: UserRole
}

type Customer {
  addresses: [Address!]
  allowedBankPayments: Boolean!
  createdAt: DateTime!
  createdBy: User!
  email: String
  id: ID!
  identificationNumber: String
  name: String
  note: String
  personName: String
  phone: String
  taxIdentificationNumber: String
  updatedAt: DateTime!
}

type CustomerPaginated {
  items: [Customer!]
  totalCount: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Material {
  createdAt: DateTime!
  createdBy: User!
  id: ID!
  name: String!
  price: Float!
  updatedAt: DateTime!
}

type Mutation {
  addProductionLog(action: ProductionLogAction!, orderItemId: ID!, pieces: Int!): OrderItem
  addUser(input: CreateUserInput!): User
  changePassword(newPassword: String!, oldPassword: String!): User
  createCustomer(input: CreateCustomerInput!): Customer
  createMaterial(name: String!, price: Float!): Material
  createOrder(input: OrderInput!, number: Int!): Order
  deleteCustomer(id: ID!): Customer
  deleteMaterial(id: ID!): Material
  deleteOrder(id: ID!): Order
  deleteUser(id: ID!): User
  login(email: String!, password: String!): AuthPayload
  updateCustomer(input: UpdateCustomerInput!): Customer
  updateMaterial(id: ID!, name: String, price: Float): Material
  updateOrder(id: ID!, input: UpdateOrderInput!): Order
  updateOrderNote(id: ID!, note: String): Order
  updateOrderStatus(id: ID!, status: OrderStatus!): Order
  updateUser(id: ID!, input: UpdateUserInput!): User
}

type Order {
  createdAt: DateTime!
  createdBy: User!
  customer: Customer
  id: ID!
  items(orderByCreatedAt: OrderByArg): [OrderItem!]!
  note: String
  number: Int!
  shippedAt: DateTime
  status: OrderStatus!
  totalPrice: Float!
  totalSize: Float
  totalTax: Float!
  updatedAt: DateTime!
  urgency: Int!
}

enum OrderByArg {
  asc
  desc
}

input OrderInput {
  customerId: ID!
  items: [OrderItemInput!]!
  note: String
  status: OrderStatus
  totalPrice: Float!
  totalTax: Float!
  urgency: Int
}

type OrderItem {
  createdAt: DateTime!
  createdBy: User!
  height: Float
  id: ID!
  material: Material
  name: String
  pieces: Int
  printedPieces: Int
  producedPieces: Int
  productionLogs: [ProductionLog!]!
  totalPrice: Float!
  totalTax: Float!
  updatedAt: DateTime!
  width: Float
}

input OrderItemInput {
  height: Float
  materialId: ID
  name: String
  pieces: Int
  totalPrice: Float!
  totalTax: Float!
  width: Float
}

type OrderPaginated {
  items: [Order!]
  totalCount: Int
}

enum OrderStatus {
  DONE
  NEW
  READY_TO_PRINT
  TO_BE_SHIPPED
  WAITING_FOR_CALCULATION
  WAITING_FOR_PRODUCTION
}

type ProductionLog {
  action: ProductionLogAction!
  createdAt: DateTime!
  createdBy: User!
  id: ID!
  orderItem: OrderItem!
  pieces: Int!
}

enum ProductionLogAction {
  PRINT
  PRODUCTION
}

type Query {
  getAllCustomers(first: Int, search: String, skip: Int): CustomerPaginated
  getAllMaterials(deleted: Boolean = false): [Material!]
  getAllOrders(customerId: ID, first: Int, orderByUrgency: OrderByArg, skip: Int, status: OrderStatus): OrderPaginated
  getAllUsers: [User!]
  getCustomer(id: ID!): Customer
  getHighestOrderNumber: Int
  getOrder(id: ID!): Order
  getOrderByNumber(number: Int!): Order
  me: User
}

input UpdateAddressInput {
  city: String
  id: ID!
  isPrimary: Boolean
  number: String
  postNumber: String
  state: String
  street: String
}

input UpdateCustomerInput {
  addresses: [UpdateAddressInput!]!
  allowedBankPayments: Boolean
  email: String
  id: ID!
  identificationNumber: String
  name: String
  note: String
  personName: String
  phone: String
  taxIdentificationNumber: String
}

input UpdateOrderInput {
  customerId: ID!
  items: [UpdateOrderItemInput!]
  note: String
  status: OrderStatus
  totalPrice: Float
  totalTax: Float
  urgency: Int
}

input UpdateOrderItemInput {
  height: Float
  id: ID
  materialId: ID!
  name: String
  pieces: Int
  totalPrice: Float!
  totalTax: Float!
  width: Float
}

input UpdateUserInput {
  email: String!
  name: String
  password: String
  role: UserRole
}

type User {
  canBeEdited: Boolean!
  email: String!
  id: ID!
  name: String
  role: UserRole!
}

enum UserRole {
  ADMINISTRATION
  EXECUTIVE
  FACTORY
}